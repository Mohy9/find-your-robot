{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","Cardlist","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAgBeA,EAZF,SAACC,GACV,OACM,yBAAKC,UAAU,sDACtB,yBAAKC,IAAI,SAAUC,IAAG,+BAA0BH,EAAMI,GAAhC,YACvB,6BACG,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCoBAC,EA3BE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACjB,OACD,6BAEEA,EAAOC,KAAI,SAACC,EAAMC,GACnB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLP,GAAII,EAAOG,GAAGP,GACdC,KAAMG,EAAOG,GAAGN,KAChBC,MAAOE,EAAOG,GAAGL,aCELO,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKd,UAAU,OACf,2BACAA,UAAU,mCACVe,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCEGI,EATA,SAACnB,GACf,OACC,yBAAKoB,MAAQ,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,WACrEvB,EAAMwB,WC8CMC,G,kBA1Cd,aAAc,IAAD,8BACZ,+CAeAC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEd,YAAaa,EAAME,OAAOC,SAf3C,EAAKC,MAAM,CACXvB,OAAQ,GACRM,YAAY,IAJA,E,iFASO,IAAD,OAClBkB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACpB,OAAQ4B,S,+BAQ7B,IAAD,OACEC,EAAiBC,KAAKP,MAAMvB,OAAO+B,QAAO,SAAAC,GAClD,OAAOA,EAAMnC,KAAKoC,cAAcC,SAAS,EAAKX,MAAMjB,YAAY2B,kBAGnE,OAAiC,IAA7BH,KAAKP,MAAMvB,OAAOmC,OACd,wCAGR,yBAAK1C,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWc,aAAcuB,KAAKZ,iBAC9B,kBAAC,EAAD,KACC,kBAACkB,EAAD,CAAUpC,OAAQ6B,U,GAlCHQ,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MACbC,SAASC,eAAe,SDyHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.c18356dc.chunk.js","sourcesContent":["import React from 'react';\r\n// import React, { Fragment } from \"react\"\r\n\r\n\r\nconst Card = (props) => {\r\n    return (\r\n          <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow5'>\r\n\t\t\t<img alt='robots'  src={`https://robohash.org/${props.id}?30x50`} />\r\n\t\t<div>\r\n\t\t  \t<h2>{props.name}</h2>\r\n\t\t  \t<p>{props.email}</p>\r\n\t\t</div>\r\n\t</div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots}) =>{\r\n\t\treturn (\r\n\t<div>\r\n\t\t{\r\n\t\t\trobots.map((user, i) => {\r\n\t\treturn (\r\n\t\t\t<Card \r\n\t\t\tkey={i} \r\n\t\t\tid={robots[i].id}\r\n\t\t\tname={robots[i].name} \r\n\t\t\temail={robots[i].email}\r\n\t\t\t/>\r\n\t\t\t);\r\n\t})\r\n\t\t}\r\n\r\n\t</div>\r\n//Before refractoring\r\n//\t<div> \r\n//\t\t<Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\r\n//\t\t<Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\r\n//\t\t<Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\r\n//\t\t<Card id={robots[3].id} name={robots[3].name} email={robots[3].email}/>\r\n//  </div>\r\n\t\t)\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t<input \r\n\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\ttype='search' \r\n\t\tplaceholder='search robots' \r\n\t\tonChange={searchChange}\r\n\t\t/>\r\n\t\t</div>\r\n\t\t );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style ={{ overflowY: 'scroll', border: '5px solid black', height:'1000px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n\r\n\t};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n// import { robots } from './robots';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\n//virtual DOM, collecting states as robots and searchfields\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\trobots: [],\r\n\t\tsearchfield:''\r\n\t\t}\r\n\t}\r\n\r\n// more info https://reactjs.org/docs/react-component.html\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(users => this.setState({robots: users }));\r\n\t}\r\n\r\n//listening to the event and with every change runs the function\r\n  onSearchChange = (event) => {\r\n  \tthis.setState({ searchfield: event.target.value})\r\n     }\r\n//rendering cards with robots\r\n  render(){\r\n  \t  \tconst filteredRobots = this.state.robots.filter(robot =>{\r\n  \t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\t//loading in slow connection scenario - just comment componentDidMount function for test\r\n\tif (this.state.robots.length === 0){\r\n\t\treturn <h1> Loading</h1>\r\n\t} else {\r\n\treturn(\r\n\t<div className='tc'>\r\n\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t<Scroll>\r\n\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t</Scroll>\r\n\t</div>\r\n\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render(<App />\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}